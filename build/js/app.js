"use strict";angular.module("snailbox",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$httpProvider",function(e,r,t){e.state("login",{url:"/login",templateUrl:"./app/features/login/loginTmpl.html",controller:"loginCtrl as loginCtrl"}).state("signup",{url:"/signup",templateUrl:"./app/features/signup/signupTmpl.html",controller:"signupCtrl as signupCtrl"}).state("userHome",{url:"/user/:id",templateUrl:"./app/features/userHome/userHomeTmpl.html",controller:"userHomeCtrl as userHomeCtrl"}).state("newAddress",{url:"/user/:id/new",templateUrl:"./app/features/newAddress/newAddressTmpl.html",controller:"newAddressCtrl as newAddressCtrl"}),r.otherwise("/login"),t.interceptors.push("authInterceptor")}]),angular.module("snailbox").constant("AUTH_EVENTS",{notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}).constant("API",{SERVER_LOCAL_MDB:"http://localhost:4800/api/v1/",SERVER_HEROKU:"http://snailbox-api.herokuapp.com/api/v1/"}),angular.module("snailbox").service("authInterceptor",["tokenService",function(e){this.request=function(r){var t=e.getToken();return t&&(r.headers.Authorization="Bearer "+t),r},this.response=function(e){return e}}]),angular.module("snailbox").service("authService",["$http","API",function(e,r){this.signup=function(t){return e({method:"POST",url:r.SERVER_HEROKU+"signup",dataType:"json",data:t}).then(function(e){return e.data})},this.login=function(t){return e({method:"POST",url:r.SERVER_HEROKU+"login",dataType:"json",data:t}).then(function(e){return e.data})["catch"](function(e){return e.data})}}]),angular.module("snailbox").service("tokenService",["$window",function(e){var r,t=e.localStorage;this.setToken=function(e){r=e,t.setItem("userToken",e)},this.getToken=function(){return r||(r=t.getItem("userToken")),r},this.removeToken=function(){r=null,t.removeItem("userToken"),console.log("token removed")},this.isAuthenticated=function(){return!!this.getToken()}}]),angular.module("snailbox").service("userService",["$http","API",function(e,r){this.getUserById=function(t){return e({method:"GET",url:r.SERVER_HEROKU+"user/"+t}).then(function(e){return e.data})}}]),angular.module("snailbox").directive("userHeader",function(){return{restrict:"E",scope:{},templateUrl:"./app/directives/userHeader/userHeaderTmpl.html",controllerAs:"ctrl",controller:["$location","tokenService",function(e,r){this.logout=function(){r.removeToken(),e.path("/")}}],bindToController:!0}}),angular.module("snailbox").controller("loginCtrl",["$state","$location","authService","tokenService",function(e,r,t,o){var n=this;n.loading=!1,n.error=!1,n.goToSignup=function(){e.go("signup")},n.submitLoginForm=function(e){return n.error=!1,!!e&&(n.loading=!0,void t.login(n.data).then(function(e){return console.log("loginResponse::::",e),n.loading=!1,"Login Success"!==e.message?(n.error=!0,n.data.password="",!1):(o.setToken(e.token),void(e.user.address.address1?r.path("/user/"+e.user._id):r.path("/user/"+e.user._id+"/new")))}))}}]),angular.module("snailbox").controller("newAddressCtrl",["$state","$location",function(e,r){var t=this;t.error=!1,t.submitNewAddress=function(e){return t.error=!1,console.log("isValid",e),e?(console.log("newAddressCtrl.newAddressData",t.newAddressData),void console.log("Form is Valid")):(t.error=!0,console.log("FORM NOT VALID"),!1)}}]),angular.module("snailbox").controller("signupCtrl",["$state","$location","authService","tokenService",function(e,r,t,o){var n=this;n.loading=!1,n.error=!1,n.passwordError=!1,n.goToLogin=function(){e.go("login")},n.submitSignupForm=function(e){return n.error=!1,n.passwordError=!1,!!e&&(n.data.password!==n.data.password2?(n.error=!0,n.passwordError=!0,n.data.password="",n.data.password2="",!1):(n.loading=!0,void t.signup(n.data).then(function(e){return console.log("signupResponse ::::",e),n.loading=!1,"Registration Success"!==e.message?(n.error=!0,n.data.password="",n.data.password2="",!1):(o.setToken(e.token),void r.path("/user/"+e.user._id+"/new"))})))}}]),angular.module("snailbox").controller("userHomeCtrl",["$stateParams","$state","userService",function(e,r,t){var o=this;o.getUser=function(){t.getUserById(e.id).then(function(e){console.log("user",e)})["catch"](function(e){r.go("login"),console.log("error",e)})},o.getUser()}]);